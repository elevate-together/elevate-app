datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String               @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  prayerGroups           UserPrayerGroup[]    @relation("UserToPrayerGroup")
  accounts               Account[]
  ownedPrayerGroups      PrayerGroup[]        @relation("UserOwnedPrayerGroups")
  prayerRequests         PrayerRequest[]
  devices                Device[]
  PrayerRequestShare     PrayerRequestShare[]
  sentFriendRequests     UserFriend[]         @relation("SentFriendRequests")
  receivedFriendRequests UserFriend[]         @relation("ReceivedFriendRequests")
  notifications          Notification[]
  reminders              Reminder[]           @relation("UserReminder")
}

model Reminder {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  title      String
  message    String
  frequency  String
  time       String
  dayOfWeek  Int?
  createdAt  DateTime @default(now())
  updatedAt DateTime  @updatedAt

  user       User     @relation("UserReminder", fields: [userId], references: [id])

}

model UserFriend {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  status         FriendStatus
  senderId       String       @db.ObjectId
  receiverId     String       @db.ObjectId

  sender         User         @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade) 
  receiver       User         @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade) 

  @@unique([senderId, receiverId])
}

model Device {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  userId    String   @db.ObjectId
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
}

model PrayerRequest {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  request    String
  status     PrayerRequestStatus @default(IN_PROGRESS)
  visibility PrayerVisibility          @default(PRIVATE)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  PrayerRequestShare PrayerRequestShare[]

  @@index([userId])
  @@index([visibility])
}

model PrayerRequestShare {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  prayerRequestId String    @db.ObjectId
  sharedWithId    String    @db.ObjectId
  sharedWithType  ShareType
  ownerId         String    @db.ObjectId
  createdAt       DateTime  @default(now())

  prayerRequest PrayerRequest @relation(fields: [prayerRequestId], references: [id], onDelete: Cascade)
  owner         User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([sharedWithId])
  @@index([prayerRequestId])
}

model PrayerGroup {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserPrayerGroup[] @relation("UserToPrayerGroup")
  ownerId     String            @db.ObjectId
  owner       User              @relation("UserOwnedPrayerGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  groupType   GroupType         @default(PUBLIC)

  @@index([ownerId])
}

model UserPrayerGroup {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  prayerGroupId String @db.ObjectId
  groupStatus   GroupStatus

  user        User        @relation("UserToPrayerGroup", fields: [userId], references: [id], onDelete: Cascade)
  prayerGroup PrayerGroup @relation("UserToPrayerGroup", fields: [prayerGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, prayerGroupId])
  @@index([userId])
  @@index([prayerGroupId])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Notification {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  text        String 
  type        NotificationType
  status      NotificationStatusType @default(UNREAD)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  userId      String                 @db.ObjectId
  link        String                 @default("/")

  user      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PrayerRequestStatus {
  ARCHIVED
  ANSWERED
  IN_PROGRESS
}

enum PrayerVisibility {
  PRIVATE
  PUBLIC
  SHARED
}

enum GroupType {
  PUBLIC
  PRIVATE
}

enum GroupStatus{
  ACCEPTED
  PENDING
}

enum ShareType {
  USER
  GROUP
}

enum NotificationType {
  PRAYER
  JOINEDGROUP
  TESTPUSH
}

enum NotificationStatusType {
  UNREAD
  READ
}

enum FriendStatus {
  PENDING
  ACCEPTED
}