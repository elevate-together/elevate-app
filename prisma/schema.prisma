datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String            @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  prayerGroups      UserPrayerGroup[] @relation("UserToPrayerGroup")
  accounts          Account[]
  ownedPrayerGroups PrayerGroup[]     @relation("UserOwnedPrayerGroups")
  prayerRequests    PrayerRequest[]
  devices           Device[]
}

model Device {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  userId    String   @db.ObjectId
  endpoint  String   @unique // Ensure endpoint is unique for each user
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint]) // Add a composite unique constraint
}

model PrayerRequest {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  request    String
  status     PrayerRequestStatus @default(IN_PROGRESS)
  visibility Visibility          @default(PRIVATE)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  PrayerRequestShare PrayerRequestShare[]
}

model PrayerRequestShare {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  prayerRequestId String    @db.ObjectId
  sharedWithId    String    @db.ObjectId
  sharedWithType  ShareType
  createdAt       DateTime  @default(now())

  prayerRequest PrayerRequest @relation(fields: [prayerRequestId], references: [id], onDelete: Cascade)
}

model PrayerGroup {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserPrayerGroup[] @relation("UserToPrayerGroup")
  ownerId     String            @db.ObjectId
  owner       User              @relation("UserOwnedPrayerGroups", fields: [ownerId], references: [id])
}

model UserPrayerGroup {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  prayerGroupId String @db.ObjectId

  user        User        @relation("UserToPrayerGroup", fields: [userId], references: [id])
  prayerGroup PrayerGroup @relation("UserToPrayerGroup", fields: [prayerGroupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, prayerGroupId]) // Ensure uniqueness in many-to-many relationships
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum PrayerRequestStatus {
  ARCHIVED
  ANSWERED
  IN_PROGRESS
}

enum Visibility {
  PRIVATE
  PUBLIC
  SHARED
}

enum ShareType {
  USER
  GROUP
}